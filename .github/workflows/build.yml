name: Build Blog from Issues

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  workflow_dispatch:

jobs:
  build:
    # We will check for the label inside the script instead of here
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Site
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // 1. Get Templates
            const baseTemplate = fs.readFileSync('./templates/base.html', 'utf8');
            const postTemplate = fs.readFileSync('./templates/post.html', 'utf8');
            const publicDir = './public';

            // Ensure public directory exists and is clean
            fs.rmSync(publicDir, { recursive: true, force: true });
            fs.mkdirSync(publicDir);

            // 2. Fetch all issues labeled 'post'
            const { data: posts } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'post',
              state: 'all' // Get both open and closed issues
            });

            if (posts.length === 0) {
              console.log('No posts with "post" label found. Building an empty site.');
            }

            // 3. Generate individual post pages
            for (const post of posts) {
              const { data: bodyHtml } = await github.rest.markdown.render({
                text: post.body || 'This post has no content.'
              });

              const postDate = new Date(post.created_at).toISOString().split('T')[0];

              let postContent = postTemplate.replace('{{TITLE}}', post.title);
              postContent = postContent.replace('{{DATE}}', postDate);
              postContent = postContent.replace('{{BODY}}', bodyHtml.data);

              let finalPage = baseTemplate.replace('{{TITLE}}', post.title);
              finalPage = finalPage.replace('{{CONTENT}}', postContent);
              
              fs.writeFileSync(path.join(publicDir, `${post.number}.html`), finalPage);
            }

            // 4. Generate index.html
            let postListHtml = posts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .map(post => {
                const postDate = new Date(post.created_at).toISOString().split('T')[0];
                return `<li><a href="/${post.number}.html"><h2>${post.title}</h2><span>${postDate}</span></a></li>`;
              })
              .join('\n');

            const indexContent = `<h1>Posts</h1><ul class="post-list">${postListHtml}</ul>`;
            let indexPage = baseTemplate.replace('{{TITLE}}', 'Home');
            indexPage = indexPage.replace('{{CONTENT}}', indexContent);

            fs.writeFileSync(path.join(publicDir, 'index.html'), indexPage);

            console.log(`âœ… Site built successfully with ${posts.length} posts.`);

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public